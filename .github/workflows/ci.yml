name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx
      
      - name: Lint with flake8
        run: |
          pip install flake8
          cd backend
          # stop the build if there are Python syntax errors or undefined names
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check code formatting with black
        run: |
          pip install black
          cd backend
          black --check app || echo "Code formatting suggestions available"
      
      - name: Run tests
        run: |
          cd backend
          pytest --version || echo "No tests configured yet"

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Lint code
        run: |
          cd frontend
          npm run lint || echo "Linting suggestions available"
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      
      - name: Check build size
        run: |
          cd frontend/dist
          du -sh .
          echo "Build completed successfully"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: false
          tags: cbit-aiforge-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: false
          tags: cbit-aiforge-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test docker-compose configuration
        run: |
          docker compose config
          echo "Docker Compose configuration is valid"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Start services with docker-compose
        run: |
          docker compose up -d
          echo "Waiting for services to start..."
          sleep 30
      
      - name: Check backend health
        run: |
          curl -f http://localhost:8000/health || exit 1
          echo "Backend health check passed"
      
      - name: Check frontend accessibility
        run: |
          curl -f http://localhost:80 || exit 1
          echo "Frontend accessibility check passed"
      
      - name: Check API documentation
        run: |
          curl -f http://localhost:8000/docs || exit 1
          echo "API documentation check passed"
      
      - name: View container logs
        if: always()
        run: |
          docker compose logs backend
          docker compose logs frontend
      
      - name: Stop services
        if: always()
        run: docker compose down -v

  build-status:
    name: Build Status Report
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build, integration-test]
    if: always()
    
    steps:
      - name: Report Status
        run: |
          echo "========================================="
          echo "  CBIT-AiForge CI Pipeline Complete"
          echo "========================================="
          echo "✅ Backend tests: ${{ needs.backend-test.result }}"
          echo "✅ Frontend tests: ${{ needs.frontend-test.result }}"
          echo "✅ Docker build: ${{ needs.docker-build.result }}"
          echo "✅ Integration tests: ${{ needs.integration-test.result }}"
          echo "========================================="

